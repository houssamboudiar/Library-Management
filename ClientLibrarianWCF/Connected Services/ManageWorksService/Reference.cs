//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientLibrarianWCF.ManageWorksService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ManageWorksService.IManageWorks")]
    public interface IManageWorks {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorks/AddWork", ReplyAction="http://tempuri.org/IManageWorks/AddWorkResponse")]
        bool AddWork(System.Collections.Generic.List<string> tags, System.Collections.Generic.List<string> writers, string title, string theme, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorks/AddWork", ReplyAction="http://tempuri.org/IManageWorks/AddWorkResponse")]
        System.Threading.Tasks.Task<bool> AddWorkAsync(System.Collections.Generic.List<string> tags, System.Collections.Generic.List<string> writers, string title, string theme, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorks/EditWork", ReplyAction="http://tempuri.org/IManageWorks/EditWorkResponse")]
        bool EditWork(int idWork, System.Collections.Generic.List<string> tags, System.Collections.Generic.List<string> writers, string title, string theme, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorks/EditWork", ReplyAction="http://tempuri.org/IManageWorks/EditWorkResponse")]
        System.Threading.Tasks.Task<bool> EditWorkAsync(int idWork, System.Collections.Generic.List<string> tags, System.Collections.Generic.List<string> writers, string title, string theme, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorks/DeleteWork", ReplyAction="http://tempuri.org/IManageWorks/DeleteWorkResponse")]
        bool DeleteWork(int idWork);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorks/DeleteWork", ReplyAction="http://tempuri.org/IManageWorks/DeleteWorkResponse")]
        System.Threading.Tasks.Task<bool> DeleteWorkAsync(int idWork);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorks/ConfirmWork", ReplyAction="http://tempuri.org/IManageWorks/ConfirmWorkResponse")]
        bool ConfirmWork(int idWork, int idBorrower);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorks/ConfirmWork", ReplyAction="http://tempuri.org/IManageWorks/ConfirmWorkResponse")]
        System.Threading.Tasks.Task<bool> ConfirmWorkAsync(int idWork, int idBorrower);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorks/returnWork", ReplyAction="http://tempuri.org/IManageWorks/returnWorkResponse")]
        bool returnWork(int idWork, int idBorrower);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorks/returnWork", ReplyAction="http://tempuri.org/IManageWorks/returnWorkResponse")]
        System.Threading.Tasks.Task<bool> returnWorkAsync(int idWork, int idBorrower);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorks/reserveWork", ReplyAction="http://tempuri.org/IManageWorks/reserveWorkResponse")]
        bool reserveWork(int idClient, int idWork);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IManageWorks/reserveWork", ReplyAction="http://tempuri.org/IManageWorks/reserveWorkResponse")]
        System.Threading.Tasks.Task<bool> reserveWorkAsync(int idClient, int idWork);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IManageWorksChannel : ClientLibrarianWCF.ManageWorksService.IManageWorks, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ManageWorksClient : System.ServiceModel.ClientBase<ClientLibrarianWCF.ManageWorksService.IManageWorks>, ClientLibrarianWCF.ManageWorksService.IManageWorks {
        
        public ManageWorksClient() {
        }
        
        public ManageWorksClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ManageWorksClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ManageWorksClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ManageWorksClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool AddWork(System.Collections.Generic.List<string> tags, System.Collections.Generic.List<string> writers, string title, string theme, string type) {
            return base.Channel.AddWork(tags, writers, title, theme, type);
        }
        
        public System.Threading.Tasks.Task<bool> AddWorkAsync(System.Collections.Generic.List<string> tags, System.Collections.Generic.List<string> writers, string title, string theme, string type) {
            return base.Channel.AddWorkAsync(tags, writers, title, theme, type);
        }
        
        public bool EditWork(int idWork, System.Collections.Generic.List<string> tags, System.Collections.Generic.List<string> writers, string title, string theme, string type) {
            return base.Channel.EditWork(idWork, tags, writers, title, theme, type);
        }
        
        public System.Threading.Tasks.Task<bool> EditWorkAsync(int idWork, System.Collections.Generic.List<string> tags, System.Collections.Generic.List<string> writers, string title, string theme, string type) {
            return base.Channel.EditWorkAsync(idWork, tags, writers, title, theme, type);
        }
        
        public bool DeleteWork(int idWork) {
            return base.Channel.DeleteWork(idWork);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteWorkAsync(int idWork) {
            return base.Channel.DeleteWorkAsync(idWork);
        }
        
        public bool ConfirmWork(int idWork, int idBorrower) {
            return base.Channel.ConfirmWork(idWork, idBorrower);
        }
        
        public System.Threading.Tasks.Task<bool> ConfirmWorkAsync(int idWork, int idBorrower) {
            return base.Channel.ConfirmWorkAsync(idWork, idBorrower);
        }
        
        public bool returnWork(int idWork, int idBorrower) {
            return base.Channel.returnWork(idWork, idBorrower);
        }
        
        public System.Threading.Tasks.Task<bool> returnWorkAsync(int idWork, int idBorrower) {
            return base.Channel.returnWorkAsync(idWork, idBorrower);
        }
        
        public bool reserveWork(int idClient, int idWork) {
            return base.Channel.reserveWork(idClient, idWork);
        }
        
        public System.Threading.Tasks.Task<bool> reserveWorkAsync(int idClient, int idWork) {
            return base.Channel.reserveWorkAsync(idClient, idWork);
        }
    }
}
